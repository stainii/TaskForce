package controllers;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.Date;

import model.DocumentCMS;
import model.Model;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

/**Maakt een fiche van een erfgoed in PDF-formaat **/

public class PdfMaker 
{ 
	/**private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
			Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
			Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.BOLD);**/
	private DocumentCMS document;
	private Font tussentitel = new Font(Font.FontFamily.COURIER,16,Font.ITALIC);
	private Model model;
	
	public PdfMaker(DocumentCMS document, Model m, File f)
	{
		this.document = document;
		this.model = m;
		
		try
		{
			Document doc = new Document();
			PdfWriter.getInstance(doc, new FileOutputStream(f));
			doc.open();
			MetaData(doc);
			Header(doc);
			Content(doc);
			doc.close();
		}
		catch(DocumentException de)
		{
			de.printStackTrace();
		}
		catch(IOException ioe)
		{
			ioe.printStackTrace();
		}
			
	}
	
	private void MetaData(Document doc)
	{
		doc.addTitle("Document Erfgoed");
		doc.addSubject("Informatie over bepaald erfgoed");
		doc.addKeywords("Erfgoed");
		doc.addAuthor("Gemeente Herzele");
		doc.addCreator("Gemeente Herzele");
	}
	
	private void Header(Document doc) throws DocumentException
	{
		Paragraph titel = new Paragraph();
		titel.add(new Paragraph(document.getErfgoed().getNaam(), new Font(Font.FontFamily.COURIER, 22, Font.BOLD )));
		legeLijn(titel,1);
		titel.add(new Paragraph("Document opgesteld door " + model.getBeheerder()+ " op " + new Date()));
		legeLijn(titel,1);
		doc.add(titel);
	}
	
	public void Content(Document doc) throws DocumentException, MalformedURLException, IOException
	{
		com.itextpdf.text.Image image = null;
			
		for(DocumentCMS c : document.getErfgoed().getDocumenten())
		{
			if(c.getType().equals("Afbeelding"))
			{

				Paragraph afbeelding = new Paragraph();
				afbeelding.add(new Paragraph("Afbeelding", tussentitel));
				
				Paragraph opmerking = new Paragraph();
				opmerking.add(new Paragraph(c.getOpmerkingen(), new Font(Font.FontFamily.COURIER, 6,Font.ITALIC)));
				
				doc.add(afbeelding);
				float factor;
				
				if (c.getImage().getWidth()>c.getImage().getHeight())
				{
					factor = 300f / c.getImage().getWidth();
				}
				else
				{
					factor = 250f / c.getImage().getHeight();
				}
				image = com.itextpdf.text.Image.getInstance(c.getImage().getScaledInstance((int)(c.getImage().getWidth()*factor), (int)(c.getImage().getHeight()*factor), 0), null);
				
				doc.add(image);
				
				legeLijn(opmerking,2);
				doc.add(opmerking);
			}
			
			if(c.getType().equals("Tekst"))
			{
				Paragraph tekst = new Paragraph();
				tekst.add(new Paragraph("Tekst",tussentitel));
				
				legeLijn(tekst,1);
				doc.add(tekst);
				
				Paragraph docTekst = new Paragraph();
				docTekst.add(new Paragraph(c.getTekst()));
				
				doc.add(docTekst);
			}
		}
			
			
	/*	if(document.getType().equals("Afbeelding"))
		{

			Paragraph afbeelding = new Paragraph();
			afbeelding.add(new Paragraph("Afbeelding", tussentitel));
			
			Paragraph opmerking = new Paragraph();
			opmerking.add(new Paragraph(document.getOpmerkingen(), new Font(Font.FontFamily.COURIER, 6,Font.ITALIC)));
			
			doc.add(afbeelding);
			image = com.itextpdf.text.Image.getInstance(document.getImage().getScaledInstance(300, 250, 0), null);
			
			doc.add(image);
			doc.add(opmerking);
			legeLijn(opmerking,2);
		
		
		if(document.getType().equals("Tekst"))
		{
			Paragraph tekst = new Paragraph();
			tekst.add(new Paragraph("Tekst",tussentitel));
			

			doc.add(tekst);
			legeLijn(tekst,2);
			
			
			Paragraph docTekst = new Paragraph();
			docTekst.add(new Paragraph(document.getTekst()));
			

			doc.add(docTekst);
		}*/
	}

	
	

	/*private static void addTitlePage(Document document)
			throws DocumentException 
			{
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Title of the document", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph(
				"Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				smallBold));
		addEmptyLine(preface, 3);
		preface.add(new Paragraph(
				"This document describes something which is very important ",
				smallBold));

		addEmptyLine(preface, 8);

		preface.add(new Paragraph(
				"This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.de ;-).",
				redFont));

		document.add(preface);
		// Start a new page
		document.newPage();
	}

	private static void addContent(Document document) throws DocumentException {
		Anchor anchor = new Anchor("First Chapter", catFont);
		anchor.setName("First Chapter");

		// Second parameter is the number of the chapter
		Chapter catPart = new Chapter(new Paragraph(anchor), 1);

		Paragraph subPara = new Paragraph("Subcategory 1", subFont);
		Section subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("Hello"));

		subPara = new Paragraph("Subcategory 2", subFont);
		subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("Paragraph 1"));
		subCatPart.add(new Paragraph("Paragraph 2"));
		subCatPart.add(new Paragraph("Paragraph 3"));

		// Add a list
		createList(subCatPart);
		Paragraph paragraph = new Paragraph();
		addEmptyLine(paragraph, 5);
		subCatPart.add(paragraph);

		// Add a table
		createTable(subCatPart);

		// Now add all this to the document
		document.add(catPart);

		// Next section
		anchor = new Anchor("Second Chapter", catFont);
		anchor.setName("Second Chapter");

		// Second parameter is the number of the chapter
		catPart = new Chapter(new Paragraph(anchor), 1);

		subPara = new Paragraph("Subcategory", subFont);
		subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("This is a very important message"));

		// Now add all this to the document
		document.add(catPart);

	}

	private static void createTable(Section subCatPart)
			throws BadElementException {
		PdfPTable table = new PdfPTable(3);

		// t.setBorderColor(BaseColor.GRAY);
		// t.setPadding(4);
		// t.setSpacing(4);
		// t.setBorderWidth(1);

		PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Table Header 2"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Table Header 3"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		table.setHeaderRows(1);

		table.addCell("1.0");
		table.addCell("1.1");
		table.addCell("1.2");
		table.addCell("2.1");
		table.addCell("2.2");
		table.addCell("2.3");

		subCatPart.add(table);

	}*/

	/*private static void createList(Section subCatPart) {
		List list = new List(true, false, 10);
		list.add(new ListItem("First point"));
		list.add(new ListItem("Second point"));
		list.add(new ListItem("Third point"));
		subCatPart.add(list);
	}*/

	private static void legeLijn(Paragraph paragraaf, int hoeveelLijnen) {
		for (int i = 0; i < hoeveelLijnen; i++) {
			paragraaf.add(new Paragraph(" "));
		}
	}

}
